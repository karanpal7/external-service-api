version: '3.8'

services:
  # PostgreSQL Database for logging and application data
  postgres:
    image: postgres:15-alpine
    container_name: fireblocks-postgres
    environment:
      - POSTGRES_DB=fireblocks_logs
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_MULTIPLE_DATABASES=fireblocks_logs,fireblocks_test
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    networks:
      - fireblocks-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: fireblocks-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - fireblocks-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Fireblocks Service (only for production Docker builds)
  fireblocks-service:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: fireblocks-service
    ports:
      - "3000:3000"
      - "9090:9090"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=fireblocks_logs
      - DB_USERNAME=postgres
      - DB_PASSWORD=password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOKI_HOST=http://loki:3100
      - FIREBLOCKS_API_KEY=${FIREBLOCKS_API_KEY:-your_api_key_here}
      - FIREBLOCKS_PRIVATE_KEY=${FIREBLOCKS_PRIVATE_KEY:-your_private_key_here}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      loki:
        condition: service_started
    volumes:
      - ./logs:/app/logs
    networks:
      - fireblocks-network
    profiles:
      - production

  # Loki for centralized logging
  loki:
    image: grafana/loki:2.9.0
    container_name: fireblocks-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki_data:/loki
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml
    networks:
      - fireblocks-network

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:10.1.0
    container_name: fireblocks-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - fireblocks-network
    depends_on:
      - loki
      - prometheus

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: fireblocks-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - fireblocks-network

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: fireblocks-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@fireblocks.local
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./database/pgadmin/servers.json:/pgadmin4/servers.json
    networks:
      - fireblocks-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - admin

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  loki_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  fireblocks-network:
    driver: bridge
